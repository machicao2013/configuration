# Read File Into Vector
snippet readfile
	std::vector<char> v;
	if (FILE *${2:fp} = fopen(${1:"filename"}, "r")) {
		char buf[1024];
		while (size_t len = fread(buf, 1, sizeof(buf), $2))
			v.insert(v.end(), buf, buf + len);
		fclose($2);
	}${3}
# std::map
snippet map
	std::map<${1:key}, ${2:value}> map${3};
# std::vector
snippet vector
	std::vector<${1:char}> v${2};
# Namespace
snippet ns
	namespace ${1:`Filename('', 'my')`} {
		${2}
	} /* $1 */
# Class
snippet cl
	class ${1:`Filename('$1', 'name')`}
	{
	private:

	public:
		$1();
		virtual ~$1();
	protected:
		DECL_LOGGER(logger);
	};

# safe delete
snippet del
	if(NULL != ${1:ptr}) {
		delete $1
		$1 = NULL;
	}
snippet debug
	LOG4CPLUS_DEBUG(logger, ${1});
snippet info
	LOG4CPLUS_INFO(logger, ${1});
snippet warn
	LOG4CPLUS_WARN(logger, ${1});
snippet error
	LOG4CPLUS_ERROR(logger, ${1});
snippet fatal
	LOG4CPLUS_FATAL(logger, ${1});
snippet log
	#include <common/SDLogger.h>
	#ifdef LOGGER
	#include <log4cplus/configurator.h>
	using namespace log4cplus;
	#endif
snippet tlp
	template <typename T>
snippet using
	using namespace ${1:std}
snippet gtest
	#include <gtest/gtest.h>

	TEST(${1:TestSuit}, ${2:TestCase})
	{
		ASSERT_EQ(${3:expected}, ${4:actual});
	}

	int main(int argc, char **argv)
	{
		testing::InitGoogleTest(&argc, argv);
		return RUN_ALL_TESTS();
	}
snippet ee
	EXPECT_EQ(${1:expected}, ${2:actual});
snippet ae
	ASSERT_EQ(${1:expected}, ${2:actual});
snippet at
	ASSERT_TRUE(${1:actual});
snippet et
	EXPECT_TRUE(${1:actual});
snippet af
	ASSERT_FALSE(${1:actual});
snippet ef
	EXPECT_FALSE(${1:actual});
snippet ane
	ASSERT_NE(${1:expected}, ${2:actual});
snippet ene
	EXPECT_NE(${1:expected}, ${2:actual});
snippet alt
	ASSERT_LT(${1:expected}, ${2:actual});
snippet elt
	EXPECT_LT(${1:expected}, ${2:actual});
snippet ale
	ASSERT_LE(${1:expected}, ${2:actual});
snippet ele
	EXPECT_LE(${1:expected}, ${2:actual});
snippet agt
	ASSERT_GT(${1:expected}, ${2:actual});
snippet egt
	EXPECT_GT(${1:expected}, ${2:actual});
snippet age
	ASSERT_GE(${1:expected}, ${2:actual});
snippet ege
	EXPECT_GE(${1:expected}, ${2:actual});
snippet ase
	ASSERT_STREQ(${1:expected}, ${2:actual});
snippet ese
	EXPECT_STREQ(${1:expected}, ${2:actual});
snippet asne
	ASSERT_STRNE(${1:expected}, ${2:actual});
snippet esne
	EXPECT_STRNE(${1:expected}, ${2:actual});
snippet asce
	ASSERT_STRCASEEQ(${1:expected}, ${2:actual});
snippet esce
	EXPECT_STRCASEEQ(${1:expected}, ${2:actual});
snippet ascne
	ASSERT_STRCASENE(${1:expected}, ${2:actual});
snippet escne
	EXPECT_STRCASENE(${1:expected}, ${2:actual});
snippet afe
	ASSERT_FLOAT_EQ(${1:expected}, ${2:actual});
snippet efe
	EXPECT_FLOAT_EQ(${1:expected}, ${2:actual});
snippet ade
	ASSERT_DOUBLE_EQ(${1:expected}, ${2:actual});
snippet ede
	EXPECT_DOUBLE_EQ(${1:expected}, ${2:actual});
